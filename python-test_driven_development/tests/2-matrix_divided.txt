>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
"""
Divides all elements of a matrix by a given number.

Args:
    matrix (list of lists): A matrix (list of lists) of integers/floats.
    div (int or float): The number to divide by.

Returns:
    list of lists: A new matrix with results rounded to 2 decimal places.

Raises:
    TypeError: If matrix is not a list of lists of integers/floats.
    TypeError: If each row of the matrix is not the same size.
    TypeError: If div is not a number.
    ZeroDivisionError: If div is 0.

Examples:
>>> matrix_divided([[4, 8], [12, 16]], 2)
[[2.0, 4.0], [6.0, 8.0]]

>>> matrix_divided([[1, 2], [3, 4]], 3)
[[0.33, 0.67], [1.0, 1.33]]

>>> matrix_divided([[5, 10], [15, 20]], 5)
[[1.0, 2.0], [3.0, 4.0]]

>>> matrix_divided([[1]], 1)
[[1.0]]

>>> matrix_divided([[1, 2], [3, 4, 5]], 2)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

>>> matrix_divided([[1, 2], ['3', 4]], 2)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> matrix_divided([[1, 2], [3, 4]], 0)
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero

>>> matrix_divided([[1, 2], [3, 4]], 'a')
Traceback (most recent call last):
    ...
TypeError: div must be a number

>>> matrix_divided([[1, 2], [3, float('nan')]], 2)
[[0.5, 1.0], [1.5, nan]]

>>> matrix_divided([[1, 2], [3, 4]], float('inf'))
[[0.0, 0.0], [0.0, 0.0]]

>>> matrix_divided()
Traceback (most recent call last):
    ...
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

>>> matrix_divided([[1, 2]])
Traceback (most recent call last):
    ...
TypeError: matrix_divided() missing 1 required positional argument: 'div'
"""