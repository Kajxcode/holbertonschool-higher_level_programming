#!/usr/bin/python3
import unittest
matrix_divided = __import__('2-matrix_divided').matrix_divided

class TestMatrixDivided(unittest.TestCase):
    def test_basic_division(self):
        matrix = [[4, 8], [12, 16]]
        expected = [[2.0, 4.0], [6.0, 8.0]]
        self.assertEqual(matrix_divided(matrix, 2), expected)

    def test_float_division(self):
        matrix = [[5, 10], [15, 20]]
        expected = [[2.5, 5.0], [7.5, 10.0]]
        self.assertEqual(matrix_divided(matrix, 2), expected)

    def test_rounding(self):
        matrix = [[1, 2], [3, 4]]
        expected = [[0.33, 0.67], [1.0, 1.33]]
        self.assertEqual(matrix_divided(matrix, 3), expected)

    def test_type_error_matrix(self):
        with self.assertRaises(TypeError) as cm:
            matrix_divided([["a", "b"]], 2)
        self.assertEqual(str(cm.exception), "matrix must be a matrix (list of lists) of integers/floats")

    def test_type_error_rows(self):
        with self.assertRaises(TypeError) as cm:
            matrix_divided([[1, 2], [3]], 2)
        self.assertEqual(str(cm.exception), "Each row of the matrix must have the same size")

    def test_type_error_div(self):
        with self.assertRaises(TypeError) as cm:
            matrix_divided([[1, 2], [3, 4]], "2")
        self.assertEqual(str(cm.exception), "div must be a number")

    def test_zero_division(self):
        with self.assertRaises(ZeroDivisionError) as cm:
            matrix_divided([[1, 2], [3, 4]], 0)
        self.assertEqual(str(cm.exception), "division by zero")

if __name__ == '__main__':
    unittest.main()
